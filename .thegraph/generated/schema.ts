// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FrackedERC721 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FrackedERC721 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FrackedERC721 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FrackedERC721", id.toString(), this);
  }

  static load(id: string): FrackedERC721 | null {
    return store.get("FrackedERC721", id) as FrackedERC721 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    return value.toBytes();
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get nftReceiver(): Bytes {
    let value = this.get("nftReceiver");
    return value.toBytes();
  }

  set nftReceiver(value: Bytes) {
    this.set("nftReceiver", Value.fromBytes(value));
  }

  get fracker(): Bytes {
    let value = this.get("fracker");
    return value.toBytes();
  }

  set fracker(value: Bytes) {
    this.set("fracker", Value.fromBytes(value));
  }

  get frackTime(): BigInt {
    let value = this.get("frackTime");
    return value.toBigInt();
  }

  set frackTime(value: BigInt) {
    this.set("frackTime", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get balancerPool(): Bytes {
    let value = this.get("balancerPool");
    return value.toBytes();
  }

  set balancerPool(value: Bytes) {
    this.set("balancerPool", Value.fromBytes(value));
  }

  get balancerFlipDuration(): BigInt {
    let value = this.get("balancerFlipDuration");
    return value.toBigInt();
  }

  set balancerFlipDuration(value: BigInt) {
    this.set("balancerFlipDuration", Value.fromBigInt(value));
  }

  get minAuctionBid(): BigInt {
    let value = this.get("minAuctionBid");
    return value.toBigInt();
  }

  set minAuctionBid(value: BigInt) {
    this.set("minAuctionBid", Value.fromBigInt(value));
  }

  get minBidIncrease(): BigInt {
    let value = this.get("minBidIncrease");
    return value.toBigInt();
  }

  set minBidIncrease(value: BigInt) {
    this.set("minBidIncrease", Value.fromBigInt(value));
  }

  get auctionDuration(): BigInt {
    let value = this.get("auctionDuration");
    return value.toBigInt();
  }

  set auctionDuration(value: BigInt) {
    this.set("auctionDuration", Value.fromBigInt(value));
  }

  get lastBidder(): Bytes {
    let value = this.get("lastBidder");
    return value.toBytes();
  }

  set lastBidder(value: Bytes) {
    this.set("lastBidder", Value.fromBytes(value));
  }

  get lastBid(): BigInt {
    let value = this.get("lastBid");
    return value.toBigInt();
  }

  set lastBid(value: BigInt) {
    this.set("lastBid", Value.fromBigInt(value));
  }
}
