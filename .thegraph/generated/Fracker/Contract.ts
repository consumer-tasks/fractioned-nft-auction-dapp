// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BalancerPoked extends ethereum.Event {
  get params(): BalancerPoked__Params {
    return new BalancerPoked__Params(this);
  }
}

export class BalancerPoked__Params {
  _event: BalancerPoked;

  constructor(event: BalancerPoked) {
    this._event = event;
  }

  get poker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get frackID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newWeightA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newWeightB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidReceived extends ethereum.Event {
  get params(): BidReceived__Params {
    return new BidReceived__Params(this);
  }
}

export class BidReceived__Params {
  _event: BidReceived;

  constructor(event: BidReceived) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get frackID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProceedsClaimed extends ethereum.Event {
  get params(): ProceedsClaimed__Params {
    return new ProceedsClaimed__Params(this);
  }
}

export class ProceedsClaimed__Params {
  _event: ProceedsClaimed;

  constructor(event: ProceedsClaimed) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get frackID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Settled extends ethereum.Event {
  get params(): Settled__Params {
    return new Settled__Params(this);
  }
}

export class Settled__Params {
  _event: Settled;

  constructor(event: Settled) {
    this._event = event;
  }

  get settler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get frackID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winningBid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenFracked extends ethereum.Event {
  get params(): TokenFracked__Params {
    return new TokenFracked__Params(this);
  }
}

export class TokenFracked__Params {
  _event: TokenFracked;

  constructor(event: TokenFracked) {
    this._event = event;
  }

  get fracker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get frackID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__frackedTokensResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: Address;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: Address;
  value12: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: Address,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: Address,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromAddress(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  BALANCER_100(): BigInt {
    let result = super.call("BALANCER_100", "BALANCER_100():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BALANCER_100(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BALANCER_100", "BALANCER_100():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BALANCER_2(): BigInt {
    let result = super.call("BALANCER_2", "BALANCER_2():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BALANCER_2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BALANCER_2", "BALANCER_2():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BALANCER_98(): BigInt {
    let result = super.call("BALANCER_98", "BALANCER_98():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BALANCER_98(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BALANCER_98", "BALANCER_98():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CLAIM_FEE(): BigInt {
    let result = super.call("CLAIM_FEE", "CLAIM_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CLAIM_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CLAIM_FEE", "CLAIM_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DAI(): Address {
    let result = super.call("DAI", "DAI():(address)", []);

    return result[0].toAddress();
  }

  try_DAI(): ethereum.CallResult<Address> {
    let result = super.tryCall("DAI", "DAI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balancerFactory(): Address {
    let result = super.call(
      "balancerFactory",
      "balancerFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_balancerFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "balancerFactory",
      "balancerFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  frackedTokens(param0: BigInt): Contract__frackedTokensResult {
    let result = super.call(
      "frackedTokens",
      "frackedTokens(uint256):(address,uint256,address,address,uint256,address,address,uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__frackedTokensResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toAddress(),
      result[12].toBigInt()
    );
  }

  try_frackedTokens(
    param0: BigInt
  ): ethereum.CallResult<Contract__frackedTokensResult> {
    let result = super.tryCall(
      "frackedTokens",
      "frackedTokens(uint256):(address,uint256,address,address,uint256,address,address,uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__frackedTokensResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toAddress(),
        value[12].toBigInt()
      )
    );
  }

  onApprove(param0: Address, param1: Address, param2: BigInt): boolean {
    let result = super.call(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onApprove(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onTransfer(param0: Address, param1: Address, param2: BigInt): boolean {
    let result = super.call(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTransfer(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _balancerFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _DAI(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _frackID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ClaimProceedsCall extends ethereum.Call {
  get inputs(): ClaimProceedsCall__Inputs {
    return new ClaimProceedsCall__Inputs(this);
  }

  get outputs(): ClaimProceedsCall__Outputs {
    return new ClaimProceedsCall__Outputs(this);
  }
}

export class ClaimProceedsCall__Inputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }

  get _frackID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimProceedsCall__Outputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }
}

export class FractionalizeCall extends ethereum.Call {
  get inputs(): FractionalizeCall__Inputs {
    return new FractionalizeCall__Inputs(this);
  }

  get outputs(): FractionalizeCall__Outputs {
    return new FractionalizeCall__Outputs(this);
  }
}

export class FractionalizeCall__Inputs {
  _call: FractionalizeCall;

  constructor(call: FractionalizeCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _initialSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amountToPool(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _targetPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _balancerFlipDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _minAuctionBid(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minBidIncrease(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _auctionDuration(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class FractionalizeCall__Outputs {
  _call: FractionalizeCall;

  constructor(call: FractionalizeCall) {
    this._call = call;
  }
}

export class PokeCall extends ethereum.Call {
  get inputs(): PokeCall__Inputs {
    return new PokeCall__Inputs(this);
  }

  get outputs(): PokeCall__Outputs {
    return new PokeCall__Outputs(this);
  }
}

export class PokeCall__Inputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }

  get _frackID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PokeCall__Outputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }
}

export class ProxyPaymentCall extends ethereum.Call {
  get inputs(): ProxyPaymentCall__Inputs {
    return new ProxyPaymentCall__Inputs(this);
  }

  get outputs(): ProxyPaymentCall__Outputs {
    return new ProxyPaymentCall__Outputs(this);
  }
}

export class ProxyPaymentCall__Inputs {
  _call: ProxyPaymentCall;

  constructor(call: ProxyPaymentCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProxyPaymentCall__Outputs {
  _call: ProxyPaymentCall;

  constructor(call: ProxyPaymentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get _frackID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}
